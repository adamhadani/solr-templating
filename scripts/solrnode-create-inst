#!/usr/bin/env python
#
#  Licensed under the Apache License, Version 2.0 (the "License"); 
#  you may not use this file except in compliance with the License. 
#  You may obtain a copy of the License at 
#  
#      http://www.apache.org/licenses/LICENSE-2.0 
#     
#  Unless required by applicable law or agreed to in writing, software 
#  distributed under the License is distributed on an "AS IS" BASIS, 
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
#  See the License for the specific language governing permissions and 
#  limitations under the License. 
#
"""Create a runnable instance from given template directory / package file (.tgz)"""

import os
import sys
import glob
import shutil
import fnmatch
import tarfile
import logging
from contextlib import closing
from optparse import OptionParser

import jinja2

from solrnode.env import SolrNodeEnv, TemplateManifest

def render_templates(inst_dir, env):
    """Walk over instance dir, and render every .tmpl file into
    target file, interpolating environment as needed"""

    # Set up template engine environment and default behavior
    jinja_env = jinja2.Environment(loader=jinja2.FileSystemLoader(
        inst_dir), undefined=jinja2.StrictUndefined)
    
    manifest = TemplateManifest.from_file(os.path.join(inst_dir, 
                    '.template_manifest'))

    for root, dirnames, filenames in os.walk(inst_dir):
        for filename in fnmatch.filter(filenames, '*.tmpl'):
            with closing(open(os.path.join(root, filename[:-5]), "w")) as ofh:
                logging.debug("Rendering template '%s'", filename)
                try:
                    tmpl_path = os.path.relpath(os.path.join(root, filename), inst_dir)
                    jinja_env.get_template(tmpl_path).stream(**env).dump(ofh)
                except OSError, exc:
                    logging.exception("OSError while rendering template file %s, aborting.:",
                                      filename)
                    return 1
                except jinja2.exceptions.UndefinedError, exc:
                    logging.error("UndefinedError [%s]: This template requires several variable definitions, " \
                                  "some of which were missing. For a list of required variables, use " \
                                  "solrnode-describe-tmpl. Error message was: %s", filename, exc)
                    return 1
                   
            os.remove(os.path.join(root, filename))

    return 0

def parse_args():
    usage = "%prog -t <template_name_or_dir_or_tgz> -i <instance_name> tomcat.port=<port> [env_var=<value> ...]"
    parser = OptionParser(usage=usage)
    parser.add_option("-t", "--template", dest="template",
        help="Template to use for creating instance. Can be template name, path to template dir, or .tgz package containing template")
    parser.add_option("-i", "--instance", dest="instance",
        help="Instance name to be created")
    parser.add_option("-f", "--force", dest="force", action="store_true", default=False,
        help="Force creation of new instance, even if directory exists")

    options, args = parser.parse_args()
    
    if not options.template or not options.instance:
        parser.error("Must supply valid template name and name of instance to create. Use -h for usage instructions.")

    return parser, (options, args)


def main():
    parser, (options, args) = parse_args()
   
    # Parse environment variables given
    env = SolrNodeEnv()
    env.update_user_args(args)

    inst_dir = os.path.join(env['fs']['instances_base_dir'],
                        options.instance)

    env['_env']['solr_home'] = os.path.join(inst_dir, 'solr-home')
        
    # If directory exists and force flag provided, purge
    if os.path.isdir(inst_dir) and options.force:
        logging.warn("Directory '%s' already exists and --force flag given, purging existing directory", 
            inst_dir)
        shutil.rmtree(inst_dir)

    if os.path.isdir(options.template):
        # Template is a directory in local fs
        try:
            shutil.copytree(options.template, inst_dir)
        except OSError, exc:
            parser.error("Directory '%s' already exists. Use --force to override." % inst_dir)

    elif os.path.exists(options.template):
        # Template given is a file, verify valid package
        if not options.template.endswith('.tgz') and \
          not options.template.endswith('.tar.gz'):
            parser.error("Invalid package file. Packages must be .tar.gz files.")

    else:
        # Check if template name exists in global template repository
        parser.error("Must supply valid template name. Use -h for usage instructions.")

    logging.info("Rendering template files in instance directory...")
    ret = render_templates(inst_dir, env)
    if ret != 0:
        # Error encountered while rendering instance, get
        # read of any temporary artifacts
        shutil.rmtree(inst_dir)
        
    logging.info("All done.")


if __name__ == "__main__":
    sys.exit(main())

