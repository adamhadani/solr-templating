#!/usr/bin/env python
#
#  Licensed under the Apache License, Version 2.0 (the "License"); 
#  you may not use this file except in compliance with the License. 
#  You may obtain a copy of the License at 
#  
#      http://www.apache.org/licenses/LICENSE-2.0 
#     
#  Unless required by applicable law or agreed to in writing, software 
#  distributed under the License is distributed on an "AS IS" BASIS, 
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
#  See the License for the specific language governing permissions and 
#  limitations under the License. 
#
"""Describe a template using its .template_manifest"""

import os
import sys
import logging
from optparse import OptionParser

from solrnode.templating.env import TemplateManifest, SolrNodeEnv

def parse_args():
	usage = "%prog <template_name_or_dir>"
	parser = OptionParser(usage=usage)
	
	parser.add_option("--templates-base-dir", dest="templates_base_dir",
					  help="Templates base dir where templates are installed.")
	
	options, args = parser.parse_args()	
	
	if not args:
		parser.error("Must supply template name. Use -h for usage instructions.")
		
	return parser, (options, args)

def main():
	parser, (options, args) = parse_args()
	logging.basicConfig(
		level = logging.INFO,
		format = "%(levelname)s - %(message)s"
	)
	
	env = SolrNodeEnv()
   
	for template in args:
		tmpl_dir = template
		if not os.path.isdir(tmpl_dir):
			# Not in current path, try global templates repository
			try:
				templates_base_dir = options.templates_base_dir or \
					env['fs']['templates_base_dir']
			except KeyError, exc:
					parser.error("fs.template_base_dir is not defined. Use --help for usage instructions.")
			else:
				tmpl_dir = os.path.join(templates_base_dir, template)
			 
		if not os.path.isdir(tmpl_dir):
			logging.error("Template '%s' does not exist, skipping", template)
			continue
		
		elif not os.path.exists(os.path.join(tmpl_dir, '.template_manifest')):
			logging.error("Could not find .template_manifest for template '%s', skipping",
						template)
			continue
		
		manifest = TemplateManifest.from_file(os.path.join(
				tmpl_dir, '.template_manifest'))
		
		print manifest
		
	return 0
	
if __name__ == "__main__":
	sys.exit(main())
